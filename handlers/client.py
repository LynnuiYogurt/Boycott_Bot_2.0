from aiogram import types, Dispatcher
from aiogram.dispatcher import filters

from create_bot import dp, bot
from keyboards import kb_client_global, kb_client_list
from settings import PROJECT_ROOT


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
	try:
		await message.answer(
			text='–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—ó —ñ –º–∏ —Å–∫–∞–∂–µ–º–æ —á–∏ –ø—ñ—à–ª–∞ –≤–æ–Ω–∞ –∑ —Ä–æ—Å—ñ—ó.\n\n'
				 '–ë–æ–π–∫–æ—Ç—É—î–º–æ —Ä–æ—Å—ñ—é —Ä–∞–∑–æ–º ‚Äì –Ω–µ –∫—É–ø–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω—ñ–π, —è–∫—ñ –ø–ª–∞—Ç—è—Ç—å –ø–æ–¥–∞—Ç–∫–∏ –≤ '
				 '–±—é–¥–∂–µ—Ç '
				 '—Ä—Ñ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å—É—é—Ç—å –≤—ñ–π–Ω—É.\n'
				 'P.S. –¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—å–∫–∏—Ö –∑–∞—Å–∞–¥–∞—Ö —ñ –∑ –≤–µ–ª–∏–∫–∏–º –±–∞–∂–∞–Ω–Ω—è–º –±–æ–π–∫–æ—Ç—É–≤–∞—Ç–∏ '
				 '–æ–∫—É–ø–∞–Ω—Ç–∞ '
				 '—ñ –≤—Å—ñ—Ö –π–æ–≥–æ –ø—Ä–∏–±—ñ—á–Ω–∏–∫—ñ–≤. –ú–∏ –Ω–µ —î –¥–µ—Ä–∂–∞–≤–Ω–æ—é —É—Å—Ç–∞–Ω–æ–≤–æ—é —á–∏ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—é –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é.'
				 ' –í—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±–µ—Ä–µ—Ç—å—Å—è –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∂–µ—Ä–µ–ª —ñ –Ω–µ—Å–µ —Å—É—Ç–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.'
				 '–í—Å–µ –±—É–¥–µ –£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶‚ù§Ô∏è',
			reply_markup=kb_client_global)
	except Exception as e:
		print(e)


async def global_action(message: types.Message):
	try:
		match message.text:
			case '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –Ω–∞–∑–≤–æ—é':
				await message.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É / –∫–æ–º–ø–∞–Ω—ñ—ó')
			case '–°–ø–∏—Å–∫–∏ –∫–æ–º–ø–∞–Ω—ñ–π':
				await message.reply(text='–Ø–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å? ü§î', reply_markup=kb_client_list)
			case '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —Ñ–æ—Ç–æ':
				await message.reply('–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∑ –Ω–∞–∑–≤–æ—é')
	except Exception as e:
		print(e)


async def check_by_name(message: types.Message):
	pass


@dp.callback_query_handler(filters.Regexp('(ua|left|stay|root)'))
async def ua_list(callback_query: types.CallbackQuery):
	if callback_query.data == 'ua':
		file_name = '–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó.txt'
	elif callback_query.data == 'left':
		file_name = '–ö–æ–º–ø–∞–Ω—ñ—ó, —â–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∏–Ω–æ–∫.txt'
	elif callback_query.data == 'stay':
		file_name = '–ö–æ–º–ø–∞–Ω—ñ—ó, —â–æ –∑–∞–ª–∏—à–∏—Å—è –Ω–∞ —Ä–∏–Ω–∫—É.txt'
	elif callback_query.data == 'root':
		file_name = '–ö–æ–º–ø–∞–Ω—ñ—ó –∑ —Ä–∞—à–∏—Å—Ç—Å—å–∫–∏–º –∫–æ—Ä—ñ–Ω–Ω—è–º.txt'
	else:
		file_name = None
	if file_name is not None:
		with open(f'{PROJECT_ROOT}/Lists of companies/{file_name}', 'rb') as file_list:
			await bot.send_document(callback_query.message.chat.id, document=file_list)

	await callback_query.answer()


def register_handlers_client(dispatcher: Dispatcher):
	dispatcher.register_message_handler(command_start, commands=['start', 'help'])
	dispatcher.register_message_handler(global_action)
