from aiogram import types
from aiogram.dispatcher import filters, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import threading
from create_bot import dp, bot
from keyboards import kb_client_global, kb_client_list, CompanySearchOptions
from models import DBSession, CompanyName, Company
from settings import PROJECT_ROOT
import logging
from fuzzywuzzy import fuzz


class CheckByName(StatesGroup):
	options = []
	waiting_for_company_selection = State()
	waiting_for_name = State()


class SendList(StatesGroup):
	waiting_for_company = State()


class CheckByPhoto(StatesGroup):
	waiting_for_photo = State()


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
	try:
		await message.answer(
			text='–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –∫–æ–º–ø–∞–Ω—ñ—ó —ñ –º–∏ —Å–∫–∞–∂–µ–º–æ —á–∏ –ø—ñ—à–ª–∞ –≤–æ–Ω–∞ –∑ —Ä–æ—Å—ñ—ó.\n\n'
				 '–ë–æ–π–∫–æ—Ç—É—î–º–æ —Ä–æ—Å—ñ—é —Ä–∞–∑–æ–º ‚Äì –Ω–µ –∫—É–ø–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω—ñ–π, —è–∫—ñ –ø–ª–∞—Ç—è—Ç—å –ø–æ–¥–∞—Ç–∫–∏ –≤ '
				 '–±—é–¥–∂–µ—Ç '
				 '—Ä—Ñ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å—É—é—Ç—å –≤—ñ–π–Ω—É.\n'
				 'P.S. –¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—å–∫–∏—Ö –∑–∞—Å–∞–¥–∞—Ö —ñ –∑ –≤–µ–ª–∏–∫–∏–º –±–∞–∂–∞–Ω–Ω—è–º –±–æ–π–∫–æ—Ç—É–≤–∞—Ç–∏ '
				 '–æ–∫—É–ø–∞–Ω—Ç–∞ '
				 '—ñ –≤—Å—ñ—Ö –π–æ–≥–æ –ø—Ä–∏–±—ñ—á–Ω–∏–∫—ñ–≤. –ú–∏ –Ω–µ —î –¥–µ—Ä–∂–∞–≤–Ω–æ—é —É—Å—Ç–∞–Ω–æ–≤–æ—é —á–∏ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—é –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é.'
				 ' –í—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±–µ—Ä–µ—Ç—å—Å—è –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∂–µ—Ä–µ–ª —ñ –Ω–µ—Å–µ —Å—É—Ç–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.'
				 '–í—Å–µ –±—É–¥–µ –£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶‚ù§Ô∏è',
			reply_markup=kb_client_global)
	except Exception as e:
		print(e)


async def global_action(message: types.Message):
	try:
		if message.text == '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –Ω–∞–∑–≤–æ—é':
			await message.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É / –∫–æ–º–ø–∞–Ω—ñ—ó')
		elif message.text == '–°–ø–∏—Å–∫–∏ –∫–æ–º–ø–∞–Ω—ñ–π':
			await message.reply(text='–Ø–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å? ü§î', reply_markup=kb_client_list)
		elif message.text == '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —Ñ–æ—Ç–æ':
			await message.reply('–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∑ –Ω–∞–∑–≤–æ—é')
	except Exception as e:
		print(e)


@dp.message_handler(filters.Regexp('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –Ω–∞–∑–≤–æ—é'))
async def check_by_name(message: types.Message):
	await message.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É / –∫–æ–º–ø–∞–Ω—ñ—ó')
	await CheckByName.waiting_for_name.set()


@dp.message_handler(state=CheckByName.waiting_for_name)
async def process_check_name(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['company_name'] = message.text

	try:
		db = DBSession
		company_name = data['company_name']

		# Check if company_name is already registered in the database
		existing_company = db.query(CompanyName).filter_by(name=company_name).first()
		if existing_company:
			company_id = existing_company.company_id
		else:
			# If not, try to find a matching company name in the database
			companies = db.query(CompanyName).all()
			matching_companies = []
			for company in companies:
				ratio = fuzz.ratio(company.name.lower(), company_name.lower())
				if ratio >= 80:  # threshold for a "good enough" match
					matching_companies.append(company)
			if len(matching_companies) == 0:
				await message.reply(f"–ö–æ–º–ø–∞–Ω—ñ—é '{company_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_client_global)
				return
			elif len(matching_companies) == 1:
				company_id = matching_companies[0].company_id
			else:
				# If multiple matching companies were found, ask the user to select one
				search_options = CompanySearchOptions(matching_companies)
				keyboard = search_options.get_inline_keyboard()
				reply_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–æ–º–ø–∞–Ω—ñ–π, –≤–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É:"
				await message.reply(reply_text, reply_markup=keyboard)
				async with state.proxy() as data:
					data['matching_companies'] = matching_companies
				await CheckByName.waiting_for_company_selection.set()
				return

		# If we found a company ID, get the description and reply to the user
		company_obj = db.query(Company).filter_by(id=company_id).first()
		if company_obj is None:
			await message.reply(f"–î–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó '{company_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å", reply_markup=kb_client_global)
		else:
			await message.reply(f'{company_name}: {company_obj.description}', reply_markup=kb_client_global)

	except Exception as e:
		await message.reply(f"–ü—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –∫–æ–º–ø–∞–Ω—ñ—ó —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", reply_markup=kb_client_global)
	finally:
		CheckByName.options.clear()
		await state.finish()


@dp.message_handler(state=CheckByName.waiting_for_company_selection)
async def process_company_selection(message: types.Message, state: FSMContext):
	company_id_to_name = {}
	async with state.proxy() as data:
		company_id = data['company_id']
		company_name = data['company_name']
		company_id_to_name[data[company_id]] = data[company_name]
	selected_company_id = int(message.text)
	# Ensure that the user has selected a valid company
	if selected_company_id not in company_id_to_name:
		await message.answer("–ü–æ–º–∏–ª–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É")
		return
	# Get the name of the selected company
	selected_company_name = company_id_to_name[selected_company_id]
	# Get the description of the selected company
	try:
		description = process_check_name(selected_company_id)
	except:
		await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –¥—ñ—Å—Ç–∞—Ç–∏ –æ–ø–∏—Å")
		return
	# Send the company description back to the user
	await message.answer(f"{selected_company_name}: {description}")
	# Clear the conversation state
	await state.finish()


@dp.message_handler(filters.Regexp('–°–ø–∏—Å–∫–∏ –∫–æ–º–ø–∞–Ω—ñ–π'))
async def send_list(message: types.Message):
	await message.reply(text='–Ø–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å? ü§î', reply_markup=kb_client_list)
	await SendList.waiting_for_company.set()


@dp.callback_query_handler(filters.Regexp('(ua|left|stay|root)'), state=SendList.waiting_for_company)
async def process_send_list(callback_query: types.CallbackQuery, state: FSMContext):
	if callback_query.data == 'ua':
		file_name = '–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó.txt'
	elif callback_query.data == 'left':
		file_name = '–ö–æ–º–ø–∞–Ω—ñ—ó, —â–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∏–Ω–æ–∫.txt'
	elif callback_query.data == 'stay':
		file_name = '–ö–æ–º–ø–∞–Ω—ñ—ó, —â–æ –∑–∞–ª–∏—à–∏—Å—è –Ω–∞ —Ä–∏–Ω–∫—É.txt'
	elif callback_query.data == 'root':
		file_name = '–ö–æ–º–ø–∞–Ω—ñ—ó –∑ —Ä–∞—à–∏—Å—Ç—Å—å–∫–∏–º –∫–æ—Ä—ñ–Ω–Ω—è–º.txt'
	else:
		file_name = None
	if file_name is not None:
		with open(f'{PROJECT_ROOT}/List_of_companies/{file_name}', 'rb') as file_list:
			await bot.send_document(callback_query.message.chat.id, document=file_list)
	await callback_query.answer()
	await state.finish()


@dp.message_handler(filters.Regexp('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —Ñ–æ—Ç–æ'))
async def check_by_name(message: types.Message):
	await message.reply('–ë—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ')
